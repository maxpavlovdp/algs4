See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (2 warnings)
Checkstyle:   FAILED (3 warnings)

Correctness:  15/41 tests passed
Memory:       1/1 tests passed
Timing:       39/41 tests passed

Aggregate score: 60.98%
[Compilation: 5%, API: 5%, Findbugs: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
3.0K Apr 20 01:36 BruteCollinearPoints.java
3.7K Apr 20 01:36 FastCollinearPoints.java
4.1K Apr 20 01:36 Point.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Point.java
*-----------------------------------------------------------

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

% javac FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At BruteCollinearPoints.java:[line 29]
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At FastCollinearPoints.java:[line 35]
Warnings generated: 2

================================================================


% checkstyle *.java
*-----------------------------------------------------------
BruteCollinearPoints.java:6: Do not use .* in import statements. [AvoidStarImport]
BruteCollinearPoints.java:62:44: Do not use the keyword 'throws' in this course. [IllegalToken]
FastCollinearPoints.java:35: Line is longer than 128 characters (currently 142). [LineLength]
Checkstyle ends with 3 errors.

================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
  * throw java.lang.NullPointerException if either argument is null
==> passed


Total: 3/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: Points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 2a: Points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
==> passed

Test 2b: Random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point exceeds limit: 1000000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - failed on trial 4 of 5

==> FAILED

Test 3a: Points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
==> passed

Test 3b: Random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point exceeds limit: 1000000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - failed on trial 4 of 5

==> FAILED

Test 4a: Points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==> passed

Test 4b: Random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5: Points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 6: Check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
    - student   solution has 0 non-null entries
    - reference solution has 4 non-null entries
    - 4 missing entries in student solution, including: (30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)


  * filename = input40.txt
    - student   solution has 0 non-null entries
    - reference solution has 4 non-null entries
    - 4 missing entries in student solution, including: (2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)


  * filename = input48.txt
    - student   solution has 0 non-null entries
    - reference solution has 6 non-null entries
    - 6 missing entries in student solution, including: (1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)


==> FAILED

Test 7: Check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 8: Random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point exceeds limit: 1000000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - failed on trial 69 of 100

  * 15 random line segments

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point exceeds limit: 1000000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - failed on trial 1 of 50

==> FAILED

Test 9: Random line segments
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point exceeds limit: 1000000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - failed on trial 69 of 100

  * 15 random line segments

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point exceeds limit: 1000000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - failed on trial 1 of 50

==> FAILED

Test 10: Check that data type is immutable by testing whether each method
        returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 11: Check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 13: Throws exception either if argument to constructor is null
         or if any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 14: Check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 12/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: Points from a file
  * filename = input8.txt
[(10000, 0) -> (0, 10000), (3000, 4000) -> (20000, 21000)]
  * filename = equidistant.txt
[(10000, 0) -> (0, 10000), (10000, 0) -> (30000, 0), (13000, 0) -> (5000, 12000), (30000, 0) -> (0, 30000)]
  * filename = input40.txt
[]
    - student   solution has 0 non-null entries
    - reference solution has 4 non-null entries
    - 4 missing entries in student solution, including: (2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)


  * filename = input48.txt
[(6000, 2000) -> (19000, 28000)]
    - student   solution has 1 non-null entries
    - reference solution has 6 non-null entries
    - 5 missing entries in student solution, including: (1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)


  * filename = input299.txt
[(1650, 2050) -> (28350, 15400), (23000, 8500) -> (30950, 8500), (3250, 17450) -> (17250, 17450)]
    - student   solution has 3 non-null entries
    - reference solution has 6 non-null entries
    - 3 missing entries in student solution, including: (7300, 10050) -> (7300, 10450) -> (7300, 25700) -> (7300, 31650)


==> FAILED

Test 2a: Points from a file with horizontal line segments
  * filename = horizontal5.txt
[(4750, 4652) -> (16307, 4652), (1888, 7657) -> (13832, 7657), (8934, 7996) -> (20547, 7996), (10375, 12711) -> (20385, 12711), (2682, 14118) -> (7821, 14118)]
  * filename = horizontal25.txt
[(10021, 1256) -> (19615, 1256), (1697, 2986) -> (15748, 2986), (5172, 4642) -> (20727, 4642), (2214, 6631) -> (19618, 6631), (4973, 7917) -> (17546, 7917), (2893, 8542) -> (20545, 8542), (6825, 10208) -> (11139, 10208), (1694, 10494) -> (9815, 10494), (10926, 11533) -> (16281, 11533), (3467, 11600) -> (19296, 11600), (2411, 12258) -> (11636, 12258), (7106, 12401) -> (19870, 12401), (2387, 13497) -> (19135, 13497), (2566, 13870) -> (19459, 13870), (10141, 14510) -> (20724, 14510), (12774, 15282) -> (20732, 15282), (3522, 16433) -> (17243, 16433), (2841, 16561) -> (11738, 16561), (2978, 16594) -> (20953, 16594), (7300, 17394) -> (16910, 17394), (7577, 17772) -> (14099, 17772), (2760, 18242) -> (8748, 18242), (6268, 18593) -> (19710, 18593), (5220, 20333) -> (20780, 20333), (8784, 20913) -> (19666, 20913)]
  * filename = horizontal50.txt
[(2624, 1040) -> (15579, 1040), (9937, 1159) -> (17792, 1159), (2028, 1783) -> (18095, 1783), (8029, 1826) -> (14525, 1826), (3525, 1850) -> (16587, 1850), (2496, 3034) -> (16744, 3034), (6113, 3095) -> (14847, 3095), (6095, 3120) -> (19909, 3120), (7684, 3141) -> (14657, 3141), (6415, 3163) -> (16367, 3163), (3914, 3287) -> (16379, 3287), (7199, 3628) -> (14313, 3628), (8013, 3745) -> (17671, 3745), (7992, 5167) -> (16729, 5167), (12141, 5942) -> (19921, 5942), (2230, 6356) -> (13115, 6356), (8171, 7118) -> (17135, 7118), (6300, 7218) -> (17289, 7218), (7430, 7696) -> (17259, 7696), (2147, 8892) -> (16919, 8892), (1341, 8976) -> (7683, 8976), (4850, 9254) -> (17739, 9254), (1622, 9333) -> (20455, 9333), (2551, 9661) -> (20475, 9661), (9037, 9809) -> (20603, 9809), (5566, 10011) -> (19363, 10011), (10849, 10556) -> (19201, 10556), (10340, 11518) -> (15497, 11518), (6437, 11841) -> (20192, 11841), (12567, 11991) -> (19205, 11991), (2066, 12180) -> (10442, 12180), (3648, 13133) -> (15334, 13133), (3454, 13746) -> (18773, 13746), (6650, 13861) -> (18679, 13861), (12043, 14089) -> (20016, 14089), (2735, 14194) -> (13957, 14194), (1947, 15175) -> (16628, 15175), (5493, 16281) -> (14705, 16281), (6030, 16537) -> (20310, 16537), (4351, 17335) -> (13505, 17335), (11973, 17473) -> (16560, 17473), (10701, 17481) -> (19160, 17481), (4218, 18014) -> (12107, 18014), (3189, 18152) -> (9886, 18152), (2271, 18213) -> (18486, 18213), (1748, 18611) -> (9303, 18611), (8643, 18776) -> (19621, 18776), (8101, 19912) -> (12474, 19912), (3064, 20684) -> (16150, 20684), (5249, 20754) -> (17428, 20754)]
  * filename = horizontal75.txt
[(7903, 1061) -> (20959, 1061), (1692, 1258) -> (18881, 1258), (4071, 1321) -> (15633, 1321), (3014, 1579) -> (13040, 1579), (3705, 1787) -> (15690, 1787), (2640, 1835) -> (20679, 1835), (1328, 1862) -> (13080, 1862), (13711, 1871) -> (18503, 1871), (11435, 1969) -> (18303, 1969), (2133, 2005) -> (13805, 2005), (5635, 2248) -> (19921, 2248), (2921, 2278) -> (13787, 2278), (9154, 2478) -> (17129, 2478), (3969, 2697) -> (16938, 2697), (3327, 3666) -> (15545, 3666), (3387, 3762) -> (17386, 3762), (3120, 4019) -> (12634, 4019), (1069, 4178) -> (17128, 4178), (4930, 4633) -> (18510, 4633), (2961, 4669) -> (19655, 4669), (1503, 4944) -> (19165, 4944), (3469, 5013) -> (19121, 5013), (6210, 5834) -> (7378, 5834), (10662, 6016) -> (18992, 6016), (10547, 6281) -> (20106, 6281), (2745, 6620) -> (10311, 6620), (7217, 7013) -> (20274, 7013), (5476, 7123) -> (17024, 7123), (5860, 7391) -> (16862, 7391), (14340, 7807) -> (18031, 7807), (2852, 8128) -> (20123, 8128), (6599, 8243) -> (15341, 8243), (9877, 8368) -> (19277, 8368), (1195, 9004) -> (18673, 9004), (1547, 9420) -> (11331, 9420), (14284, 9681) -> (20739, 9681), (7057, 9808) -> (18361, 9808), (2578, 9830) -> (16543, 9830), (1988, 10307) -> (17334, 10307), (3230, 10334) -> (17913, 10334), (1295, 11057) -> (19110, 11057), (4136, 12046) -> (16302, 12046), (3143, 12095) -> (14002, 12095), (3566, 12570) -> (19409, 12570), (2547, 12628) -> (13795, 12628), (5283, 12647) -> (14696, 12647), (3083, 13661) -> (20095, 13661), (6923, 14049) -> (20447, 14049), (1049, 14118) -> (15022, 14118), (15032, 14175) -> (20785, 14175), (5516, 14243) -> (11448, 14243), (4301, 14436) -> (11808, 14436), (6544, 14630) -> (9489, 14630), (1787, 14638) -> (19827, 14638), (5797, 14770) -> (20303, 14770), (1230, 15680) -> (13285, 15680), (1090, 15840) -> (10781, 15840), (3072, 15953) -> (19079, 15953), (4050, 16819) -> (15932, 16819), (4141, 16975) -> (15611, 16975), (9515, 17047) -> (19974, 17047), (10558, 17358) -> (14928, 17358), (4653, 17637) -> (17831, 17637), (4525, 17925) -> (19136, 17925), (1707, 17944) -> (16032, 17944), (10402, 18306) -> (19234, 18306), (5184, 18549) -> (18924, 18549), (1313, 19055) -> (11742, 19055), (2793, 19081) -> (9414, 19081), (1255, 19103) -> (20410, 19103), (4425, 19374) -> (17080, 19374), (5673, 19457) -> (19304, 19457), (2136, 19721) -> (20381, 19721), (10027, 20618) -> (20029, 20618), (1536, 20976) -> (14591, 20976)]
  * filename = horizontal100.txt
[(1090, 1279) -> (13975, 1279), (3341, 1321) -> (15533, 1321), (2283, 1877) -> (20689, 1877), (1447, 2070) -> (19652, 2070), (1524, 2377) -> (15620, 2377), (7521, 2491) -> (17928, 2491), (2053, 2907) -> (20360, 2907), (4339, 2922) -> (14108, 2922), (8850, 3115) -> (20255, 3115), (1457, 3126) -> (11549, 3126), (2777, 3186) -> (7438, 3186), (5311, 3227) -> (17189, 3227), (2068, 3814) -> (15795, 3814), (6355, 3883) -> (17874, 3883), (2513, 3884) -> (19914, 3884), (12584, 3956) -> (17835, 3956), (11020, 4184) -> (20610, 4184), (10297, 4430) -> (20296, 4430), (1239, 4848) -> (12319, 4848), (2928, 5262) -> (9016, 5262), (3288, 5270) -> (18953, 5270), (1145, 5298) -> (11194, 5298), (2089, 5368) -> (20729, 5368), (3462, 5453) -> (10282, 5453), (1384, 5505) -> (18355, 5505), (3619, 5538) -> (15549, 5538), (3908, 5563) -> (19963, 5563), (10441, 5730) -> (19100, 5730), (1400, 5883) -> (17733, 5883), (2051, 6123) -> (20715, 6123), (1238, 6140) -> (11759, 6140), (3658, 6338) -> (11043, 6338), (1173, 6889) -> (19585, 6889), (4166, 6909) -> (15997, 6909), (3401, 7315) -> (19919, 7315), (4109, 7659) -> (16981, 7659), (5507, 7934) -> (14353, 7934), (6017, 7946) -> (15401, 7946), (4596, 7963) -> (20814, 7963), (6443, 8379) -> (19201, 8379), (4958, 8585) -> (13573, 8585), (2882, 8611) -> (12721, 8611), (6586, 8650) -> (11386, 8650), (6352, 9135) -> (20523, 9135), (6508, 9178) -> (20346, 9178), (1324, 9290) -> (20609, 9290), (1608, 9347) -> (18396, 9347), (3635, 9886) -> (19282, 9886), (5272, 9898) -> (15848, 9898), (1666, 10130) -> (18129, 10130), (1905, 10232) -> (14147, 10232), (4461, 10272) -> (16147, 10272), (3798, 10339) -> (20409, 10339), (1630, 11385) -> (14915, 11385), (3933, 11459) -> (16774, 11459), (3334, 12013) -> (11447, 12013), (2479, 12111) -> (18174, 12111), (9219, 12701) -> (19227, 12701), (9791, 12721) -> (18910, 12721), (6937, 13076) -> (18603, 13076), (1672, 13404) -> (19787, 13404), (2150, 13453) -> (20049, 13453), (1157, 13507) -> (10552, 13507), (7248, 13632) -> (16054, 13632), (5764, 13634) -> (13774, 13634), (11278, 13752) -> (19141, 13752), (2689, 13933) -> (11884, 13933), (13394, 14170) -> (19946, 14170), (1192, 14330) -> (15142, 14330), (4361, 14461) -> (11740, 14461), (1914, 14462) -> (18212, 14462), (2656, 14586) -> (11599, 14586), (6377, 14789) -> (11163, 14789), (3792, 15012) -> (20516, 15012), (4237, 15261) -> (18392, 15261), (6823, 15428) -> (18961, 15428), (2828, 15500) -> (13277, 15500), (1329, 15556) -> (18994, 15556), (3881, 15773) -> (20547, 15773), (6855, 16086) -> (20673, 16086), (5675, 16225) -> (20343, 16225), (5221, 16284) -> (15503, 16284), (3148, 16761) -> (19412, 16761), (5505, 16784) -> (12187, 16784), (4609, 17059) -> (12198, 17059), (1085, 17159) -> (20028, 17159), (9581, 17217) -> (17442, 17217), (5119, 17293) -> (17042, 17293), (1781, 18394) -> (14390, 18394), (16448, 18630) -> (20990, 18630), (6795, 18675) -> (18393, 18675), (8675, 18688) -> (19847, 18688), (8858, 18806) -> (17903, 18806), (11665, 18921) -> (15546, 18921), (13675, 19101) -> (18429, 19101), (2038, 19155) -> (18305, 19155), (3456, 19925) -> (20453, 19925), (2638, 20488) -> (14637, 20488), (5640, 20636) -> (20063, 20636), (5835, 20698) -> (19642, 20698)]
==> passed

Test 2b: Random horizontal line segments
  *  1 random horizontal line segment
[(3776, 4350) -> (16713, 4350)]
[(2291, 5040) -> (19213, 5040)]
[(4445, 15193) -> (13650, 15193)]
[(4051, 6361) -> (17942, 6361)]
[(1193, 9814) -> (17725, 9814)]
[(9674, 5745) -> (18727, 5745)]
[(4851, 7787) -> (16162, 7787)]
[(4649, 17640) -> (18965, 17640)]
[(4239, 3079) -> (19505, 3079)]
[(1226, 9812) -> (9770, 9812)]
[(3782, 8388) -> (13898, 8388)]
[(1614, 4002) -> (19830, 4002)]
[(1171, 18872) -> (17637, 18872)]
[(1258, 14108) -> (13066, 14108)]
[(1764, 18862) -> (18562, 18862)]
[(2527, 15360) -> (8404, 15360)]
[(4068, 17999) -> (14737, 17999)]
[(7985, 12663) -> (17810, 12663)]
[(4011, 8695) -> (12577, 8695)]
[(2709, 10437) -> (18277, 10437)]
[(1915, 19107) -> (14547, 19107)]
[(1050, 17923) -> (7613, 17923)]
[(4402, 9490) -> (19898, 9490)]
[(2088, 14998) -> (15349, 14998)]
[(2125, 17675) -> (13315, 17675)]
[(1010, 2714) -> (10998, 2714)]
[(1354, 15769) -> (15623, 15769)]
[(1538, 13909) -> (20469, 13909)]
[(3809, 7861) -> (13705, 7861)]
[(6460, 17917) -> (20857, 17917)]
[(3381, 9168) -> (5109, 9168)]
[(8286, 20346) -> (20744, 20346)]
[(5689, 14322) -> (20953, 14322)]
[(2466, 12698) -> (17422, 12698)]
[(10312, 12964) -> (18459, 12964)]
[(5910, 11982) -> (13548, 11982)]
[(4862, 19022) -> (17927, 19022)]
[(7808, 15483) -> (19104, 15483)]
[(2949, 7250) -> (17311, 7250)]
[(3835, 12356) -> (19203, 12356)]
[(1983, 10493) -> (19295, 10493)]
[(5995, 10157) -> (18583, 10157)]
[(4704, 14915) -> (20243, 14915)]
[(1761, 18838) -> (11781, 18838)]
[(4650, 13521) -> (14594, 13521)]
[(7163, 9545) -> (14977, 9545)]
[(1782, 6005) -> (14921, 6005)]
[(7426, 9209) -> (10512, 9209)]
[(7498, 15144) -> (20192, 15144)]
[(5272, 2625) -> (20478, 2625)]
[(7745, 12469) -> (17888, 12469)]
[(4029, 2270) -> (16713, 2270)]
[(3415, 12258) -> (10993, 12258)]
[(7158, 10506) -> (18977, 10506)]
[(8708, 17607) -> (17689, 17607)]
[(8920, 16262) -> (17230, 16262)]
[(3611, 20687) -> (15738, 20687)]
[(4525, 3266) -> (20654, 3266)]
[(2488, 1351) -> (19300, 1351)]
[(12152, 3776) -> (20608, 3776)]
[(3823, 15526) -> (18070, 15526)]
[(10117, 20798) -> (16804, 20798)]
[(1710, 3241) -> (13075, 3241)]
[(2152, 17441) -> (20569, 17441)]
[(13469, 3314) -> (20815, 3314)]
[(3861, 9907) -> (19418, 9907)]
[(5819, 13404) -> (18061, 13404)]
[(13421, 18016) -> (20592, 18016)]
[(5241, 3846) -> (16057, 3846)]
[(13101, 15486) -> (19099, 15486)]
[(3365, 8430) -> (13581, 8430)]
[(2291, 6733) -> (19161, 6733)]
[(4542, 17617) -> (18995, 17617)]
[(1749, 18769) -> (14819, 18769)]
[(8541, 19081) -> (19982, 19081)]
[(3284, 17709) -> (14608, 17709)]
[(8601, 5164) -> (18187, 5164)]
[(6384, 4155) -> (13708, 4155)]
[(10495, 2170) -> (15269, 2170)]
[(8144, 20596) -> (17920, 20596)]
[(8217, 2671) -> (18028, 2671)]
[(3448, 14260) -> (5940, 14260)]
[(5404, 3889) -> (15529, 3889)]
[(10984, 5311) -> (20331, 5311)]
[(6743, 9507) -> (18014, 9507)]
[(11358, 15012) -> (20557, 15012)]
[(1144, 14147) -> (20334, 14147)]
[(4098, 1356) -> (18001, 1356)]
[(4156, 3858) -> (15997, 3858)]
[(10288, 15503) -> (20868, 15503)]
[(2736, 5260) -> (12817, 5260)]
[(7127, 12792) -> (11636, 12792)]
[(2473, 10138) -> (14991, 10138)]
[(5387, 7743) -> (14331, 7743)]
[(3279, 9394) -> (14248, 9394)]
[(3052, 13813) -> (19482, 13813)]
[(3077, 9121) -> (19675, 9121)]
[(9472, 13965) -> (15123, 13965)]
[(5248, 15365) -> (15035, 15365)]
[(6449, 20389) -> (14724, 20389)]
[(2002, 13922) -> (19020, 13922)]
[(5833, 9868) -> (13795, 9868)]
[(3251, 8387) -> (15463, 8387)]
[(4323, 13270) -> (11946, 13270)]
[(3423, 6596) -> (15044, 6596)]
[(2587, 8468) -> (12142, 8468)]
[(7290, 13079) -> (18675, 13079)]
[(1393, 8283) -> (16288, 8283)]
[(2394, 6347) -> (16544, 6347)]
[(1060, 11303) -> (15340, 11303)]
[(8013, 15905) -> (16830, 15905)]
[(9391, 10085) -> (20639, 10085)]
[(5974, 10631) -> (14013, 10631)]
[(14930, 8003) -> (20167, 8003)]
[(2264, 7439) -> (14678, 7439)]
[(9858, 15260) -> (17865, 15260)]
[(2150, 6858) -> (20577, 6858)]
[(4058, 13860) -> (14096, 13860)]
[(3402, 17354) -> (14243, 17354)]
[(5994, 17757) -> (19234, 17757)]
[(3172, 8663) -> (13716, 8663)]
[(5836, 18421) -> (19693, 18421)]
[(2911, 11630) -> (19092, 11630)]
[(1798, 2673) -> (11742, 2673)]
[(9106, 5558) -> (17490, 5558)]
[(10405, 4659) -> (16291, 4659)]
[(3852, 5296) -> (17118, 5296)]
[(8130, 11303) -> (20671, 11303)]
[(1407, 13699) -> (11900, 13699)]
[(7999, 20541) -> (17784, 20541)]
[(9945, 17923) -> (20034, 17923)]
[(3885, 7280) -> (13814, 7280)]
[(5009, 3685) -> (19334, 3685)]
[(11337, 9723) -> (17377, 9723)]
[(4252, 1141) -> (14766, 1141)]
[(13741, 13332) -> (20728, 13332)]
[(15798, 3548) -> (20289, 3548)]
[(2841, 10121) -> (9750, 10121)]
[(4358, 17140) -> (19297, 17140)]
[(1238, 3061) -> (19619, 3061)]
[(1961, 8019) -> (14946, 8019)]
[(6439, 11904) -> (18461, 11904)]
[(3169, 18830) -> (20634, 18830)]
[(16456, 18495) -> (20363, 18495)]
[(8151, 6741) -> (20787, 6741)]
[(6497, 17858) -> (14910, 17858)]
[(3959, 3893) -> (18084, 3893)]
[(7399, 7786) -> (19283, 7786)]
[(14498, 7452) -> (20883, 7452)]
[(7167, 15167) -> (14896, 15167)]
[(1356, 11521) -> (20507, 11521)]
[(4503, 6701) -> (16959, 6701)]
[(3396, 16259) -> (14485, 16259)]
[(3495, 15400) -> (19913, 15400)]
[(1327, 14415) -> (16045, 14415)]
[(8932, 9728) -> (18859, 9728)]
[(1233, 14652) -> (10991, 14652)]
[(1087, 2766) -> (20912, 2766)]
[(7668, 16550) -> (16272, 16550)]
[(2195, 11950) -> (18264, 11950)]
[(10884, 18269) -> (19556, 18269)]
[(1216, 14967) -> (20144, 14967)]
[(8880, 3034) -> (20971, 3034)]
[(6217, 12597) -> (14107, 12597)]
[(3594, 13333) -> (14365, 13333)]
[(11278, 12639) -> (20139, 12639)]
[(2385, 19017) -> (16225, 19017)]
[(1753, 9051) -> (18102, 9051)]
[(10317, 7133) -> (18067, 7133)]
[(11492, 5030) -> (20065, 5030)]
[(4604, 15362) -> (15816, 15362)]
[(3282, 4909) -> (16632, 4909)]
[(2399, 4009) -> (11987, 4009)]
[(9581, 16315) -> (14734, 16315)]
[(1570, 18310) -> (15960, 18310)]
[(3489, 5719) -> (12268, 5719)]
[(2279, 7293) -> (17311, 7293)]
[(3107, 9412) -> (20853, 9412)]
[(9656, 15462) -> (13382, 15462)]
[(3391, 4027) -> (19147, 4027)]
[(4847, 1883) -> (18986, 1883)]
[(3125, 8648) -> (19652, 8648)]
[(3381, 17866) -> (20533, 17866)]
[(10085, 15120) -> (20070, 15120)]
[(6561, 7962) -> (15942, 7962)]
[(5789, 7419) -> (19054, 7419)]
[(6525, 17299) -> (17224, 17299)]
[(4649, 3768) -> (17645, 3768)]
[(6162, 12498) -> (20900, 12498)]
[(3874, 14629) -> (14785, 14629)]
[(8028, 9400) -> (20635, 9400)]
[(1636, 7100) -> (18360, 7100)]
[(1423, 7507) -> (18875, 7507)]
[(2883, 19535) -> (19053, 19535)]
[(4279, 4301) -> (20387, 4301)]
[(11351, 3496) -> (20257, 3496)]
[(2811, 20181) -> (13521, 20181)]
[(1117, 19563) -> (19294, 19563)]
[(12559, 3234) -> (18954, 3234)]
[(3416, 17854) -> (20993, 17854)]
[(1871, 3562) -> (19981, 3562)]
[(12725, 1662) -> (19181, 1662)]
[(5832, 2310) -> (20648, 2310)]
[(7821, 11097) -> (19480, 11097)]
[(1158, 19343) -> (15205, 19343)]
[(5027, 15435) -> (19469, 15435)]
[(3184, 20235) -> (16443, 20235)]
[(3162, 2145) -> (9359, 2145)]
[(1086, 2785) -> (16645, 2785)]
[(5990, 17342) -> (19223, 17342)]
[(6197, 2693) -> (15768, 2693)]
[(1199, 20933) -> (19923, 20933)]
[(3519, 20652) -> (8963, 20652)]
[(1797, 2612) -> (20525, 2612)]
[(1573, 2188) -> (18256, 2188)]
[(1030, 17337) -> (20959, 17337)]
[(3227, 2943) -> (18836, 2943)]
[(10254, 15876) -> (17436, 15876)]
[(2817, 9600) -> (19113, 9600)]
[(1308, 7245) -> (6660, 7245)]
[(6484, 18234) -> (18171, 18234)]
[(3668, 6668) -> (20385, 6668)]
[(1570, 13643) -> (7068, 13643)]
[(1119, 1126) -> (19903, 1126)]
[(3752, 15464) -> (16301, 15464)]
[(6179, 13209) -> (15283, 13209)]
[(2000, 1793) -> (11632, 1793)]
[(1130, 10813) -> (20783, 10813)]
[(2894, 15081) -> (20288, 15081)]
[(5594, 1779) -> (20981, 1779)]
[(2461, 7460) -> (16790, 7460)]
[(2643, 20498) -> (13236, 20498)]
[(2661, 5960) -> (18684, 5960)]
[(1326, 1828) -> (18638, 1828)]
[(2476, 9220) -> (20716, 9220)]
[(3808, 3052) -> (20826, 3052)]
[(8091, 6507) -> (18563, 6507)]
[(4031, 19205) -> (11197, 19205)]
[(7786, 2116) -> (17805, 2116)]
[(3803, 7216) -> (13703, 7216)]
[(3883, 14184) -> (17952, 14184)]
[(12956, 4485) -> (17067, 4485)]
[(2279, 12791) -> (17916, 12791)]
[(3532, 2843) -> (17250, 2843)]
[(5188, 17172) -> (15697, 17172)]
[(6234, 19958) -> (9366, 19958)]
[(8008, 17064) -> (14847, 17064)]
[(1370, 1181) -> (16851, 1181)]
[(4770, 2134) -> (17840, 2134)]
[(5001, 20469) -> (

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.