See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (2 warnings)
Checkstyle:   FAILED (3 warnings)

Correctness:  26/41 tests passed
Memory:       1/1 tests passed
Timing:       39/41 tests passed

Aggregate score: 77.07%
[Compilation: 5%, API: 5%, Findbugs: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
3.0K Apr 19 15:53 BruteCollinearPoints.java
3.7K Apr 19 15:53 FastCollinearPoints.java
4.1K Apr 19 15:53 Point.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Point.java
*-----------------------------------------------------------

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

% javac FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At BruteCollinearPoints.java:[line 29]
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At FastCollinearPoints.java:[line 35]
Warnings generated: 2

================================================================


% checkstyle *.java
*-----------------------------------------------------------
BruteCollinearPoints.java:6: Do not use .* in import statements. [AvoidStarImport]
BruteCollinearPoints.java:62:44: Do not use the keyword 'throws' in this course. [IllegalToken]
FastCollinearPoints.java:35: Line is longer than 128 characters (currently 142). [LineLength]
Checkstyle ends with 3 errors.

================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
  * throw java.lang.NullPointerException if either argument is null
==> passed


Total: 3/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: Points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 2a: Points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
==> passed

Test 2b: Random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point exceeds limit: 1000000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - failed on trial 4 of 5

==> FAILED

Test 3a: Points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
==> passed

Test 3b: Random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point exceeds limit: 1000000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - failed on trial 4 of 5

==> FAILED

Test 4a: Points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==> passed

Test 4b: Random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5: Points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 6: Check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
    - student   solution has 0 non-null entries
    - reference solution has 4 non-null entries
    - 4 missing entries in student solution, including: (30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)


  * filename = input40.txt
    - student   solution has 0 non-null entries
    - reference solution has 4 non-null entries
    - 4 missing entries in student solution, including: (2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)


  * filename = input48.txt
    - student   solution has 0 non-null entries
    - reference solution has 6 non-null entries
    - 6 missing entries in student solution, including: (1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)


==> FAILED

Test 7: Check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 8: Random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point exceeds limit: 1000000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - failed on trial 69 of 100

  * 15 random line segments

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point exceeds limit: 1000000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - failed on trial 1 of 50

==> FAILED

Test 9: Random line segments
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point exceeds limit: 1000000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - failed on trial 69 of 100

  * 15 random line segments

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point exceeds limit: 1000000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - failed on trial 1 of 50

==> FAILED

Test 10: Check that data type is immutable by testing whether each method
        returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 11: Check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 13: Throws exception either if argument to constructor is null
         or if any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 14: Check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 12/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: Points from a file
  * filename = input8.txt
  * filename = equidistant.txt
    - student   solution has 3 non-null entries
    - reference solution has 4 non-null entries
    - 1 missing entry in student solution: (10000, 0) -> (13000, 0) -> (20000, 0) -> (30000, 0)


  * filename = input40.txt
    - student   solution has 0 non-null entries
    - reference solution has 4 non-null entries
    - 4 missing entries in student solution, including: (2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)


  * filename = input48.txt
    - student   solution has 1 non-null entries
    - reference solution has 6 non-null entries
    - 5 missing entries in student solution, including: (1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)


  * filename = input299.txt
    - student   solution has 3 non-null entries
    - reference solution has 6 non-null entries
    - 3 missing entries in student solution, including: (7300, 10050) -> (7300, 10450) -> (7300, 25700) -> (7300, 31650)


==> FAILED

Test 2a: Points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
  * filename = horizontal50.txt
  * filename = horizontal75.txt
  * filename = horizontal100.txt
==> passed

Test 2b: Random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: Points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
  * filename = vertical50.txt
  * filename = vertical75.txt
  * filename = vertical100.txt
==> passed

Test 3b: Random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: Points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
  * filename = random91.txt
  * filename = random152.txt
==> passed

Test 4b: Random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5a: Points from a file with 5 or more on some line segments
  * filename = input9.txt
  * filename = input10.txt
  * filename = input20.txt
    - student   solution has 4 non-null entries
    - reference solution has 5 non-null entries
    - 1 missing entry in student solution: (4096, 20992) -> (4096, 22016) -> (4096, 23040) -> (4096, 24064) -> (4096, 25088)


  * filename = input50.txt
    - student   solution has 1 non-null entries
    - reference solution has 7 non-null entries
    - 6 missing entries in student solution, including: (1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)


  * filename = input80.txt
    - student   solution has 2 non-null entries
    - reference solution has 31 non-null entries
    - 29 missing entries in student solution, including: (13000, 29000) -> (19000, 29000) -> (25000, 29000) -> (28000, 29000)


  * filename = input300.txt
    - student   solution has 3 non-null entries
    - reference solution has 6 non-null entries
    - 3 missing entries in student solution, including: (7300, 10050) -> (7300, 10450) -> (7300, 17000) -> (7300, 25700) -> (7300, 31650)


  * filename = inarow.txt
==> FAILED

Test 5b: Points from a file with 5 or more on some line segments
  * filename = kw1260.txt
    - student   solution has 255 non-null entries
    - reference solution has 288 non-null entries
    - 33 missing entries in student solution, including: (9064, 27791) -> (9451, 28108) -> (9838, 28425) -> (10225, 28742) -> (10612, 29059)


  * filename = rs1423.txt
    - student   solution has 407 non-null entries
    - reference solution has 443 non-null entries
    - 36 missing entries in student solution, including: (5424, 24273) -> (5645, 24609) -> (5866, 24945) -> (6087, 25281)


==> FAILED

Test 6: Points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 7: Check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
    - student   solution has 0 non-null entries
    - reference solution has 4 non-null entries
    - 4 missing entries in student solution, including: (30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)


  * filename = input40.txt
    - student   solution has 0 non-null entries
    - reference solution has 4 non-null entries
    - 4 missing entries in student solution, including: (2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)


  * filename = input48.txt
    - student   solution has 0 non-null entries
    - reference solution has 6 non-null entries
    - 6 missing entries in student solution, including: (1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)


  * filename = input299.txt
    - student   solution has 0 non-null entries
    - reference solution has 6 non-null entries
    - 6 missing entries in student solution, including: (3250, 17450) -> (8500, 17450) -> (13400, 17450) -> (17250, 17450)


==> FAILED

Test 8: Check for fragile dependence on return value of toString()
  * filename = equidistant.txt
    - student   solution has 3 non-null entries
    - reference solution has 4 non-null entries
    - 1 missing entry in student solution: (10000, 0) -> (13000, 0) -> (20000, 0) -> (30000, 0)


  * filename = input40.txt
    - student   solution has 0 non-null entries
    - reference solution has 4 non-null entries
    - 4 missing entries in student solution, including: (2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)


  * filename = input48.txt
    - student   solution has 1 non-null entries
    - reference solution has 6 non-null entries
    - 5 missing entries in student solution, including: (1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)



It is bad style to write code that depends on the particular format of
the output from the toString() method, especially if your reason for
doing so is to circumvent the public API (which intentionally does not
provide access to the x- and y-coordinates).

==> FAILED

Test 9: Random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments
    - student   solution has 24 non-null entries
    - reference solution has 25 non-null entries
    - 1 missing entry in student solution: (1407, 316) -> (6297, 9846) -> (9720, 16517) -> (10209, 17470)


    - failed on trial 100 of 100

  * 50 random line segments
  * 100 random line segments
    - student   solution has 99 non-null entries
    - reference solution has 100 non-null entries
    - 1 missing entry in student solution: (2595, 4409) -> (2992, 4955) -> (4977, 7685) -> (5771, 8777)


    - failed on trial 2 of 2

==> FAILED

Test 10: Random line segments
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments
    - student   solution has 23 non-null entries
    - reference solution has 25 non-null entries
    - 2 missing entries in student solution, including: (6833, 7428) -> (9385, 11140) -> (10485, 12740) -> (10529, 12804)


    - failed on trial 68 of 100

  * 50 random line segments
    - student   solution has 49 non-null entries
    - reference solution has 50 non-null entries
    - 1 missing entry in student solution: (9255, 5758) -> (9489, 7864) -> (9498, 7945) -> (9651, 9322)


    - failed on trial 11 of 15

  * 100 random line segments
    - student   solution has 98 non-null entries
    - reference solution has 100 non-null entries
    - 2 missing entries in student solution, including: (7796, 4473) -> (8214, 6107) -> (8346, 6623) -> (8533, 7354)


    - failed on trial 2 of 2

==> FAILED

Test 11: Random distinct points in a given range
  * 5 random points in a 10-by-10 grid
  * 10 random points in a 10-by-10 grid
    - student   solution has 0 non-null entries
    - reference solution has 1 non-null entries
    - 1 missing entry in student solution: (5, 4) -> (6, 5) -> (8, 7) -> (9, 8)


    - failed on trial 13 of 500
     10
         3     3
         9     4
         9     8
         5     4
         1     2
         8     7
         8     1
         5     8
         6     5
         3     7

  * 50 random points in a 10-by-10 grid
    - student   solution has 3 non-null entries
    - reference solution has 44 non-null entries
    - 41 missing entries in student solution, including: (2, 9) -> (5, 9) -> (6, 9) -> (7, 9)


    - failed on trial 1 of 100

  * 90 random points in a 10-by-10 grid
    - student   solution has 6 non-null entries
    - reference solution has 113 non-null entries
    - 107 missing entries in student solution, including: (0, 9) -> (1, 9) -> (2, 9) -> (4, 9) -> (5, 9) -> (6, 9) -> (7, 9) -> (8, 9) -> (9, 9)


    - failed on trial 1 of 50

  * 200 random points in a 50-by-50 grid
    - student   solution has 7 non-null entries
    - reference solution has 222 non-null entries
    - 215 missing entries in student solution, including: (15, 49) -> (22, 49) -> (33, 49) -> (34, 49) -> (48, 49) -> (49, 49)


    - failed on trial 1 of 10

==> FAILED

Test 12: M*N points on an M-by-N grid
  * 3-by-3 grid
  * 4-by-4 grid
    - student   solution has 6 non-null entries
    - reference solution has 10 non-null entries
    - 4 missing entries in student solution, including: (0, 2) -> (1, 2) -> (2, 2) -> (3, 2)


  * 5-by-5 grid
    - student   solution has 4 non-null entries
    - reference solution has 16 non-null entries
    - 12 missing entries in student solution, including: (0, 4) -> (1, 4) -> (2, 4) -> (3, 4) -> (4, 4)


  * 10-by-10 grid
    - student   solution has 5 non-null entries
    - reference solution has 154 non-null entries
    - 149 missing entries in student solution, including: (0, 9) -> (1, 9) -> (2, 9) -> (3, 9) -> (4, 9) -> (5, 9) -> (6, 9) -> (7, 9) -> (8, 9) -> (9, 9)


  * 20-by-20 grid
    - student   solution has 8 non-null entries
    - reference solution has 2446 non-null entries
    - 2438 missing entries in student solution, including: (0, 19) -> (1, 19) -> (2, 19) -> (3, 19) -> (4, 19) -> (5, 19) -> (6, 19) -> (7, 19) -> (8, 19) -> (9, 19) -> (10, 19) -> (11, 19) -> (12, 19) -> (13, 19) -> (14, 19) -> (15, 19) -> (16, 19) -> (17, 19) -> (18, 19) -> (19, 19)


  * 5-by-4 grid
    - student   solution has 7 non-null entries
    - reference solution has 13 non-null entries
    - 6 missing entries in student solution, including: (0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3)


  * 6-by-4 grid
    - student   solution has 5 non-null entries
    - reference solution has 16 non-null entries
    - 11 missing entries in student solution, including: (0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3)


  * 10-by-4 grid
    - student   solution has 14 non-null entries
    - reference solution has 38 non-null entries
    - 24 missing entries in student solution, including: (0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3) -> (6, 3) -> (7, 3) -> (8, 3) -> (9, 3)


  * 15-by-4 grid
    - student   solution has 32 non-null entries
    - reference solution has 79 non-null entries
    - 47 missing entries in student solution, including: (0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3) -> (6, 3) -> (7, 3) -> (8, 3) -> (9, 3) -> (10, 3) -> (11, 3) -> (12, 3) -> (13, 3) -> (14, 3)


  * 25-by-4 grid
    - student   solution has 94 non-null entries
    - reference solution has 213 non-null entries
    - 119 missing entries in student solution, including: (0, 3) -> (1, 3) -> (2, 3) -> (3, 3) -> (4, 3) -> (5, 3) -> (6, 3) -> (7, 3) -> (8, 3) -> (9, 3) -> (10, 3) -> (11, 3) -> (12, 3) -> (13, 3) -> (14, 3) -> (15, 3) -> (16, 3) -> (17, 3) -> (18, 3) -> (19, 3) -> (20, 3) -> (21, 3) -> (22, 3) -> (23, 3) -> (24, 3)


==> FAILED

Test 13: Check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 14: Check that data type does not mutate the constructor argument
  * input8.txt
    - data type mutated the points[] array
    - data type should have no side effects unless documented in API
  * equidistant.txt
    - data type mutated the points[] array
    - data type should have no side effects unless documented in API
==> FAILED

Test 15: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 16: Throws exception either if argument to constructor is null
         or if any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 17: Check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 11/21 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Computing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.03      196608           0         196608               105336
=> passed    32   0.04     3145728           0        3145728              1715696
=> passed    64   0.41    50331648           0       50331648             27703264
=> passed   128   4.66   805306368           0      805306368            445308864
=> passed   256  47.05 12884901888           0    12884901888           7141556096
Aborting: time limit of 10 seconds exceeded
Test 2a-2e: Find collinear points among n/4 arbitrary line segments


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00      196608           0         196608               105336
=> passed    32   0.02     3145728           0        3145728              1715696
=> passed    64   0.25    50331648           0       50331648             27703264
=> passed   128   4.05   805306368           0      805306368            445308864
=> passed   256  66.86 12884901888           0    12884901888           7141556096
Aborting: time limit of 10 seconds exceeded
Total: 8/10 tests passed!


================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.02        7936       17542          43020                 2448
=> passed   128   0.02       32256       83519         199294                 9122
=> passed   256   0.04      130048      385369         900786                34889
=> passed   512   0.14      522240     1756569        4035378               135813
=> passed  1024   0.30     2093056     7963783       18020622               534778
=> passed  2048   0.85     8380416    35468333       79317082              2120207
==> 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (79317082 / 18020622) = 2.14
=> passed

==> 7/7 tests passed

Test 2a-2g: Find collinear points among the n points on an n-by-1 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        7936        4764          17464                 8258
=> passed   128   0.00       32256       17796          67848                27866
=> passed   256   0.01      130048       68717         267482               104323
=> passed   512   0.02      522240      269399        1061038               405465
=> passed  1024   0.06     2093056     1065026

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.