See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  FAILED (0 errors, 13 warnings)
API:          PASSED

Findbugs:     FAILED (3 warnings)
Checkstyle:   FAILED (12 warnings)

Correctness:  36/43 tests passed
Memory:       36/53 tests passed
Timing:       110/110 tests passed

Aggregate score: 82.03%
[Compilation: 5%, API: 5%, Findbugs: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
3.0K Mar 30 22:02 Deque.java
 554 Mar 30 22:02 Permutation.java
4.3K Mar 30 22:02 RandomizedQueue.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Deque.java
*-----------------------------------------------------------
Deque.java:8: warning: [rawtypes] found raw type: Deque.Node
        Node next;
        ^
  missing type arguments for generic class Deque<Item>.Node<ItemN>
  where ItemN,Item are type-variables:
    ItemN extends Object declared in class Deque.Node
    Item extends Object declared in class Deque
Deque.java:9: warning: [rawtypes] found raw type: Deque.Node
        Node prev;
        ^
  missing type arguments for generic class Deque<Item>.Node<ItemN>
  where ItemN,Item are type-variables:
    ItemN extends Object declared in class Deque.Node
    Item extends Object declared in class Deque
Deque.java:30: warning: [unchecked] unchecked conversion
            current = current.next;
                             ^
  required: Deque<Item>.Node<Item>
  found:    Deque.Node
  where Item is a type-variable:
    Item extends Object declared in class Deque
Deque.java:67: warning: [rawtypes] found raw type: Deque.Node
            Node newFirst = new Node(item);
            ^
  missing type arguments for generic class Deque<Item>.Node<ItemN>
  where ItemN,Item are type-variables:
    ItemN extends Object declared in class Deque.Node
    Item extends Object declared in class Deque
Deque.java:67: warning: [rawtypes] found raw type: Deque.Node
            Node newFirst = new Node(item);
                                ^
  missing type arguments for generic class Deque<Item>.Node<ItemN>
  where ItemN,Item are type-variables:
    ItemN extends Object declared in class Deque.Node
    Item extends Object declared in class Deque
Deque.java:67: warning: [unchecked] unchecked call to Deque.Node(ItemN) as a member of the raw type Deque.Node
            Node newFirst = new Node(item);
                            ^
  where ItemN is a type-variable:
    ItemN extends Object declared in class Deque.Node
Deque.java:70: warning: [unchecked] unchecked conversion
            f = newFirst;
                ^
  required: Deque<Item>.Node<Item>
  found:    Deque.Node
  where Item is a type-variable:
    Item extends Object declared in class Deque
Deque.java:77: warning: [rawtypes] found raw type: Deque.Node
        f = new Node(item);
                ^
  missing type arguments for generic class Deque<Item>.Node<ItemN>
  where ItemN,Item are type-variables:
    ItemN extends Object declared in class Deque.Node
    Item extends Object declared in class Deque
Deque.java:77: warning: [unchecked] unchecked call to Deque.Node(ItemN) as a member of the raw type Deque.Node
        f = new Node(item);
            ^
  where ItemN is a type-variable:
    ItemN extends Object declared in class Deque.Node
Deque.java:77: warning: [unchecked] unchecked conversion
        f = new Node(item);
            ^
  required: Deque<Item>.Node<Item>
  found:    Deque.Node
  where Item is a type-variable:
    Item extends Object declared in class Deque
Note: Deque.java has additional unchecked or unsafe operations.
10 warnings

% javac RandomizedQueue.java
*-----------------------------------------------------------
RandomizedQueue.java:48: warning: [unchecked] unchecked cast
        this.arr = (Item[]) new Object[1];
                            ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
RandomizedQueue.java:72: warning: [unchecked] unchecked cast
        Item[] newArr = (Item[]) new Object[arr.length * 2];
                                 ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
RandomizedQueue.java:81: warning: [unchecked] unchecked cast
        Item[] newArr = (Item[]) new Object[arr.length / 2];
                                 ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
3 warnings

% javac Permutation.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Deque:

RandomizedQueue:

Permutation:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
M D UC_USELESS_OBJECT UC: The object stored in the variable 'newArr' is created and modified, but its value never goes outside of the method 'shrimpArrayTwice()' or produces any side effect.  At RandomizedQueue.java:[line 81]
M D UC_USELESS_VOID_METHOD UC: The void method 'shrimpArrayTwice()' appears to serve no purpose.  At RandomizedQueue.java:[line 85]
H P DM_BOXED_PRIMITIVE_FOR_PARSING Bx: Replace code like 'new Integer(args[0]).intValue()' with 'Integer.parseInt(args[0])'.  At Permutation.java:[line 16]
Warnings generated: 3

================================================================


% checkstyle *.java
*-----------------------------------------------------------
Deque.java:8:14: The instance (or static) variable 'next' must be private. [VisibilityModifier]
Deque.java:9:14: The instance (or static) variable 'prev' must be private. [VisibilityModifier]
Deque.java:10:15: The instance (or static) variable 'content' must be private. [VisibilityModifier]
Deque.java:18:20: The instance (or static) variable 'current' must be private. [VisibilityModifier]
Deque.java:27:15: 'if' is not followed by whitespace. [WhitespaceAfter]
Deque.java:81:7: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
Deque.java:103:19: Inner assignments should be avoided. [InnerAssignment]
Deque.java:118:19: Inner assignments should be avoided. [InnerAssignment]
RandomizedQueue.java:10: Line is longer than 128 characters (currently 242). [LineLength]
RandomizedQueue.java:11: Line is longer than 128 characters (currently 242). [LineLength]
RandomizedQueue.java:12: Line is longer than 128 characters (currently 606). [LineLength]
RandomizedQueue.java:14: Line is longer than 128 characters (currently 633). [LineLength]
Checkstyle ends with 12 errors.

================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Deque
*-----------------------------------------------------------
Running 16 total tests.

Tests 1-6 make random calls to addFirst(), addLast(), removeFirst(),
removeLast(), isEmpty(), and size(). The probabilities of each
operation are (p1, p2, p3, p4, p5, p6), respectively.

Test 1: Calls to addFirst(), addLast(), and size()
  *    5 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
==> passed

Test 2: Calls to addFirst(), removeFirst(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
==> passed

Test 3: Calls to addFirst(), removeLast(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  *   50 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  *  500 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  * 1000 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
==> passed

Test 4: Calls to addLast(), removeLast(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *    5 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  *   50 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  *  500 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  * 1000 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
==> passed

Test 5: Calls to addLast(), removeFirst(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  *  500 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  * 1000 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
==> passed

Test 6: Calls to addFirst(), addLast(), removeFirst(),
        removeLast(), isEmpty(), and size().
  *    5 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *  500 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  * 1000 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *    5 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
  *   50 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
    - failed on operation 11 of 50
    - student   removeLast() returned 6
    - reference removeLast() returned 10
    - sequence of dequeue operations was:
         deque.isEmpty()
         deque.size()
         deque.isEmpty()
         deque.size()
         deque.addFirst(4)
         deque.removeLast()      ==> 4
         deque.addFirst(6)
         deque.addLast(7)
         deque.removeFirst()     ==> 6
         deque.removeLast()      ==> 7
         deque.addFirst(10)
         deque.removeLast()      ==> 6

  *  500 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
    - failed on operation 62 of 500
    - student   removeFirst() returned 57
    - reference removeFirst() returned 61

  * 1000 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
    - failed on operation 102 of 1000
    - student   removeLast() returned 87
    - reference removeLast() returned 101

==> FAILED

Test 7: Removing from an empty deque
  * removeFirst()
  * removeLast()
==> passed

Test 8: Create multiple deque objects at the same time
==> passed

Test 9: Check iterator() after calls only to addFirst()
==> passed

Test 10: Check iterator() after intermixed calls to addFirst(), addLast(),
         removeFirst(), and removeLast()
==> passed

Test 11: Create two nested iterators to same deque
  * n = 10
  * n = 1000
==> passed

Test 12: Create two parallel iterators to same deque
  * n = 10
  * n = 1000
==> passed

Test 13: Create Deque objects of different parameterized types
==> passed

Test 14: Check that addFirst() and addLast() each throw a NullPointerException
         when inserting null items
==> passed

Test 15: Check that remove() and next() throw the specified exceptions in iterator()
==> passed

Test 16: Check iterator() when Deque is empty
==> passed


Total: 15/16 tests passed!


================================================================
Testing correctness of RandomizedQueue
*-----------------------------------------------------------
Running 18 total tests.

Tests 1-4 make random calls to enqueue(), dequeue(), sample(),
isEmpty(), and size(). The probabilities of each operation are
(p1, p2, p3, p4, p5), respectively.

Test 1: check random calls to enqueue() and size()
  *    5 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
==> passed

Test 2: check random calls to enqueue() and dequeue()
  *    5 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *   50 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *  500 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  * 1000 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *    5 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *   50 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *  500 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  * 1000 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
==> passed

Test 3: check random calls to enqueue(), sample(), and size()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
==> passed

Test 4: check random calls to enqueue(), dequeue(), sample(), isEmpty(), and size()
  *    5 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *  500 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  * 1000 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *    5 random calls (0.1, 0.1, 0.6, 0.1, 0.1)
  *   50 random calls (0.1, 0.1, 0.6, 0.1, 0.1)
  *  500 random calls (0.1, 0.1, 0.6, 0.1, 0.1)
  * 1000 random calls (0.1, 0.1, 0.6, 0.1, 0.1)
==> passed

Test 5: call dequeue() and sample() from an empty randomized queue
  * dequeue()
  * sample()
==> passed

Test 6: create multiple randomized queue objects at the same time
==> passed

Test 7: check that iterator() returns correct items after a sequence of
        enqueue() operations
    - student   solution has 24 null entries
    - reference solution has 0 null entries
    - student   solution has 976 non-null entries
    - reference solution has 1000 non-null entries
    - 24 missing entries in student solution, including: 767

==> FAILED

Test 8: check that iterator() returns correct items after sequence of enqueue()
        and dequeue() operations
    - student   solution has 10 null entries
    - reference solution has 0 null entries
    - student   solution has 525 non-null entries
    - reference solution has 535 non-null entries
    - 10 missing entries in student solution, including: 998

==> FAILED

Test 9: create two nested iterators over the same randomized queue
  * n = 10
    java.lang.NullPointerException

    TestRandomizedQueue.twoNestedIterators(TestRandomizedQueue.java:443)
    TestRandomizedQueue.test9(TestRandomizedQueue.java:515)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1022)

  * n = 1000
    java.lang.NullPointerException

    TestRandomizedQueue.twoNestedIterators(TestRandomizedQueue.java:443)
    TestRandomizedQueue.test9(TestRandomizedQueue.java:516)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1022)

==> FAILED

Test 10: create two parallel iterators over the same randomized queue
  * n = 10
    - two inner iterators return the same sequence of values;
    - they should return the same set of values but in a
      different order
  * n = 1000
    - two inner iterators return the same sequence of values;
    - they should return the same set of values but in a
      different order
==> FAILED

Test 11: create two iterators over different randomized queues
    - student   solution has 4 null entries
    - reference solution has 0 null entries
    - student   solution has 6 non-null entries
    - reference solution has 10 non-null entries
    - 4 missing entries in student solution, including: 8

    - student   solution has 2 null entries
    - reference solution has 0 null entries
    - student   solution has 8 non-null entries
    - reference solution has 10 non-null entries
    - 2 missing entries in student solution, including: 5

==> FAILED

Test 12: create RandomizedQueue objects of different parameterized types
==> passed

Test 13: check randomness of sample() by enqueueing n items, repeatedly calling
         sample(), and counting the frequency of each item
  * n = 3, trials = 12000
  * n = 5, trials = 12000
  * n = 8, trials = 12000
  * n = 10, trials = 12000
==> passed

Test 14: check randomness of dequeue() by enqueueing n items, dequeueing n items,
         and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000
  * n = 3, trials = 12000
  * n = 4, trials = 12000
  * n = 5, trials = 12000
==> passed

Test 15: check randomness of iterator() by enqueueing n items, iterating over those
         n items, and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000
  * n = 3, trials = 12000
    - next() returned null
    - failed on operation 1 of 12000
  * n = 4, trials = 12000
  * n = 5, trials = 12000
    - next() returned null
    - failed on operation 1 of 12000
==> FAILED

Test 16: check that NullPointerException is thrown when inserting null items
==> passed

Test 17: check that remove() and next() throw the specified exceptions in iterator()
==> passed

Test 18: check iterator() when RandomizedQueue is empty
==> passed


Total: 12/18 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference RandomizedQueue and Deque)
********************************************************************************

Testing correctness of Permutation
*-----------------------------------------------------------
Tests 1-5 call the main() function directly, resetting standard input
before each call.

Running 9 total tests.

Test 1a: check formatting for sample inputs from assignment specification
  % java Permutation 3 < distinct.txt
  F
  C
  B

  % java Permutation 3 < distinct.txt
  I
  H
  C

  % java Permutation 8 < duplicates.txt
  BB
  AA
  BB
  BB
  BB
  BB
  CC
  CC

==> passed

Test 1b: check formatting for other inputs
  % java Permutation 8 < mediumTale.txt
  of
  was
  the
  was
  worst
  of
  it
  of

  % java Permutation 0 < distinct.txt
  [no output]

==> passed

Test 2: check that main() reads all data from standard input
  * filename = distinct.txt, k = 3
  * filename = distinct.txt, k = 3
  * filename = duplicates.txt, k = 8
  * filename = mediumTale.txt, k = 8
==> passed

Test 3a: check that main() prints each item from the sequence at most once
         (for inputs with no duplicate strings)
  * filename = distinct.txt, k = 3
  * filename = distinct.txt, k = 1
  * filename = distinct.txt, k = 9
  * filename = permutation6.txt, k = 6
  * filename = permutation10.txt, k = 10
==> passed

Test 3b: check that main() prints each item from the sequence at most once
         (for inputs with duplicate strings)
  * filename = duplicates.txt, k = 8
  * filename = duplicates.txt, k = 3
  * filename = permutation8.txt, k = 6
  * filename = permutation8.txt, k = 2
  * filename = tinyTale.txt, k = 10
==> passed

Test 3c: check that main() prints each item from the sequence at most once
         (for inputs with newlines)
  * filename = mediumTale.txt, k = 10
  * filename = mediumTale.txt, k = 20
  * filename = tale.txt, k = 10
  * filename = tale.txt, k = 50
==> passed

Test 4: check main() when k = 0
  * filename = distinct.txt, k = 0
  * filename = distinct.txt, k = 0
==> passed

Test 5a: check that permutations are uniformly random
         (for inputs with no duplicate strings)
  * filename = permutation4.txt, k = 1
  * filename = permutation4.txt, k = 2
  * filename = permutation4.txt, k = 3
  * filename = permutation4.txt, k = 4
  * filename = permutation6.txt, k = 2
==> passed

Test 5b: check that permutations are uniformly random
         (for inputs with duplicate strings)
  * filename = permutation5.txt, k = 1
  * filename = permutation5.txt, k = 2
  * filename = permutation5.txt, k = 3
  * filename = duplicates.txt, k = 3
  * filename = permutation8.txt, k = 2
==> passed

Total: 9/9 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Computing memory of Permutation
*-----------------------------------------------------------
Running 2 total tests.

Test 1: Check that only one Deque or RandomizedQueue object is created
  * filename = distinct.txt, n = 9, k = 1
  * filename = distinct.txt, n = 9, k = 2
  * filename = distinct.txt, n = 9, k = 4
  * filename = tinyTale.txt, n = 12, k = 10
  * filename = tale.txt, n = 138653, k = 50
==> passed

Test 2: Check that the maximum size of any Deque or RandomizedQueue object
        created is >=k and <= n
  * filename = distinct.txt, n = 9, k = 1
  * filename = distinct.txt, n = 9, k = 2
  * filename = distinct.txt, n = 9, k = 4
  * filename = tinyTale.txt, n = 12, k = 10
  * filename = tale.txt, n = 138653, k = 5
  * filename = tale.txt, n = 138653, k = 50
  * filename = tale.txt, n = 138653, k = 500
  * filename = tale.txt, n = 138653, k = 5000
  * filename = tale.txt, n = 138653, k = 50000
==> passed

Test 3 (bonus): Check that maximum size of any or Deque or RandomizedQueue object
                created is equal to k
  * filename = tale.txt, n = 138653, k = 5
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, n = 138653, k = 50
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, n = 138653, k = 500
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, n = 138653, k = 5000
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, n = 138653, k = 50000
    - max size of RandomizedQueue object = 138653
==> FAILED

Total: 2/2 tests passed!

================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Computing memory of Deque
*-----------------------------------------------------------
For tests 1-4, the maximum amount of memory allowed for a deque
containing n items is 48n + 192.

Running 28 total tests.

Test 1a-1e: Total memory usage after inserting n items,
            where n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed        8          424
=> passed       64         3112
=> passed      256        12328
=> passed     1024        49192
=> passed     4096       196648
==> 5/5 tests passed

Memory: 48.00 n + 40.00   (R^2 = 1.000)



Test 2a-2e: Total memory usage after inserting n+1 items,
            where n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed        8          472
=> passed       64         3160
=> passed      256        12376
=> passed     1024        49240
=> passed     4096       196696
==> 5/5 tests passed

Memory after adding n = 2^i + 1 items: 48.00 n + 40.00   (R^2 = 1.000)



Test 3a-3e: Total memory usage after inserting 2n+1 items
            and deleting n items, where n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> FAILED        8          856   (1.4x)
=> FAILED       64         6232   (1.9x)
=> FAILED      256        24664   (2.0x)
=> FAILED     1024        98392   (2.0x)
=> FAILED     4096       393304   (2.0x)
==> 0/5 tests passed

Memory: 96.00 n + -8.00   (R^2 = 1.000)



Test 4a-4e: Total memory usage after inserting n items and then
            deleting all but one item, where n is a power of 2.
            (should not grow with n or be too large of a constant)

                 n        bytes
----------------------------------------------------------
=> FAILED        8          424   (1.8x)
=> FAILED       64         3112  (13.0x)
=> FAILED      256        12328  (51.4x)
=> FAILED     1024        49192 (205.0x)
=> FAILED     4096       196648 (819.4x)
==> 0/5 tests passed

Memory after adding n = 2^i items: 71498.91   (R^2 = 0.000)



Test 5a-5e: Total memory usage of iterator after inserting n items.
            (should not grow with n or be too large of a constant)

                 n        bytes
----------------------------------------------------------
=> passed        8           32
=> passed       64           32
=> passed      256           32
=> passed     1024           32
=> passed     4096           32
==> 5/5 tests passed

Memory of iterator after adding n = 2^i items: 32.00   (R^2 = 1.000)



Test 6a: Insert n strings; delete them one at a time, checking for
         loitering after each deletion. The probabilities of addFirst()
         and addLast() are (p1, p2), respectively. The probabilities of
         removeFirst() and removeLast() are (q1, q2), respectively
  * 100 random insertions (1.0, 0.0) and 100 random deletions (1.0, 0.0)
    - loitering observed during 99 of 100 deletions
    - maximum number of loitered objects at one time = 99
  * 100 random insertions (1.0, 0.0) and 100 random deletions (0.0, 1.0)
  * 100 random insertions (0.0, 1.0) and 100 random deletions (1.0, 0.0)
    - loitering observed during 99 of 100 deletions
    - maximum number of loitered objects at one time = 99
  * 100 random insertions (0.0, 1.0) and 100 random deletions (0.0, 1.0)
  * 100 random insertions (0.5, 0.5) and 100 random deletions (0.5, 0.5)
    - loitering observed during 100 of 100 deletions
    - maximum number of loitered objects at one time = 51
==> FAILED

Test 6b: Perform random operations, checking for loitering after
         each operation. The probabilities of addFirst(), addLast(),
         removeFirst(), and removeLast() are (p1, p2, p3, p4),
         respectively.
  * 100 random operations (0.8, 0.0, 0.2, 0.0)
    - loitering detected after operation 8 of 100
    - sequence of operations:
         deque.addFirst("JZBEPMRZTV")
         deque.addFirst("VOPHONUFVJ")
         deque.addFirst("ICEQOPZBQW")
         deque.addFirst("WXGQBOSBKJ")
         deque.addFirst("PBTXFFEJWN")
         deque.addFirst("ZTLFAZFOSL")
         deque.addFirst("JDCLTPVOLY")
         deque.removeFirst()     ==> JDCLTPVOLY
    - loitered object(s):
      JDCLTPVOLY

  * 100 random operations (0.8, 0.0, 0.0, 0.2)
  * 100 random operations (0.0, 0.8, 0.2, 0.0)
    - loitering detected after operation 5 of 100
    - sequence of operations:
         deque.addLast("EMNVAIICXH")
         deque.removeFirst()     ==> EMNVAIICXH
         deque.addLast("DOTVBWUSAQ")
         deque.addLast("WMHCKALQDN")
         deque.removeFirst()     ==> DOTVBWUSAQ
    - loitered object(s):
      DOTVBWUSAQ

  * 100 random operations (0.0, 0.8, 0.0, 0.2)
  * 100 random operations (0.4, 0.4, 0.1, 0.1)
    - loitering detected after operation 13 of 100
  * 100 random operations (0.2, 0.2, 0.3, 0.3)
    - loitering detected after operation 5 of 100
    - sequence of operations:
         deque.addLast("HRHLIHUDPM")
         deque.removeFirst()     ==> HRHLIHUDPM
         deque.addLast("VMGOIMMOUJ")
         deque.addLast("ZBTITMYAUY")
         deque.removeFirst()     ==> VMGOIMMOUJ
    - loitered object(s):
      VMGOIMMOUJ

==> FAILED

Test 7: Worst-case constant memory allocated or deallocated
        per deque operation?
  * 128 random operations
    - failed on trial 83 of 128
    - when current size of Deque was 43 objects;
    - the call to addFirst()
    - caused a change in memory of -144 bytes
    - any change of more than 96 bytes fails the test
  * 256 random operations
  * 512 random operations
==> FAILED

Total: 15/28 tests passed!

================================================================



Computing memory of RandomizedQueue
*-----------------------------------------------------------
For tests 1-4, the maximum amount of memory allowed for
a randomized queue containing n items is 48n + 192.

Running 23 total tests.

Test 1a-1d: Total memory usage after inserting n integers.

                 n        bytes
----------------------------------------------------------
=> passed       64          568
=> passed      256         2104
=> passed     1024         8248
=> passed     4096        32824
==> 4/4 tests passed


Memory: 8.00 n + 56.00   (R^2 = 1.000)



Test 2a-2d: Total memory usage after inserting n+1 items.

                 n        bytes
----------------------------------------------------------
=> passed       64         1080
=> passed      256         4152
=> passed     1024        16440
=> passed     4096        65592
==> 4/4 tests passed


Memory: 16.00 n + 40.00   (R^2 = 1.000)



Test 3a-3d: Total memory usage after inserting 2n+1 items, and
            then deleting n items.

                 n        bytes
----------------------------------------------------------
=> passed

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.